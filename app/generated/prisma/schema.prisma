generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuditLog {
  id          String   @id
  action      String
  userId      String
  after       Json?
  before      Json?
  entityId    String
  entityType  String
  performedAt DateTime @default(now())
  payload     Json?
  deleted     Boolean  @default(false)
  User        User     @relation(fields: [userId], references: [id])
}

model BankDetail {
  id            Int     @id @default(autoincrement())
  bankName      String  @db.VarChar(100)
  accountNumber String  @db.VarChar(50)
  iban          String  @db.VarChar(50)
  bic           String  @db.VarChar(50)
  deleted       Boolean @default(false)
}

model Business {
  id                              String   @id
  createdAt                       DateTime @default(now())
  updatedAt                       DateTime
  tenantId                        String
  createdById                     String
  updatedById                     String
  businessType                    String
  businessCategory                String
  businessSubcategory             String
  legalBusinessName               String
  doingBusinessAs                 String?
  ein                             String
  businessState                   String
  onlineStatus                    String
  onlineLink                      String?
  businessEmail                   String?
  addressLine1                    String
  addressLine2                    String?
  zip                             String
  city                            String
  isManualEntry                   Boolean  @default(false)
  deleted                         Boolean  @default(false)
  User_Business_createdByIdToUser User     @relation("Business_createdByIdToUser", fields: [createdById], references: [id])
  Tenant                          Tenant   @relation(fields: [tenantId], references: [id])
  User_Business_updatedByIdToUser User     @relation("Business_updatedByIdToUser", fields: [updatedById], references: [id])
}

model Customer {
  id                              Int       @id @default(autoincrement())
  name                            String    @db.VarChar(100)
  email                           String    @db.VarChar(100)
  phone                           String    @db.VarChar(15)
  address                         String    @db.VarChar(255)
  createdAt                       DateTime  @default(now())
  updatedAt                       DateTime
  createdById                     String
  updatedById                     String
  tenantId                        String
  deleted                         Boolean   @default(false)
  User_Customer_createdByIdToUser User      @relation("Customer_createdByIdToUser", fields: [createdById], references: [id])
  Tenant                          Tenant    @relation(fields: [tenantId], references: [id])
  User_Customer_updatedByIdToUser User      @relation("Customer_updatedByIdToUser", fields: [updatedById], references: [id])
  Invoice                         Invoice[]
  Order                           Order[]

  @@unique([tenantId, email])
}

model Discount {
  id                              Int             @id @default(autoincrement())
  name                            String          @db.VarChar(50)
  discountValue                   Decimal         @db.Decimal(5, 2)
  createdById                     String
  updatedById                     String
  deleted                         Boolean         @default(false)
  User_Discount_createdByIdToUser User            @relation("Discount_createdByIdToUser", fields: [createdById], references: [id])
  User_Discount_updatedByIdToUser User            @relation("Discount_updatedByIdToUser", fields: [updatedById], references: [id])
  InvoiceDetail                   InvoiceDetail[]
}

model Invoice {
  id                              String           @id
  number                          String?          @unique
  amount                          Decimal          @db.Decimal(10, 2)
  status                          InvoiceStatus    @default(DRAFT)
  paymentType                     PaymentType?
  orderId                         String?
  parentInvoiceId                 String?
  customerId                      Int
  tenantId                        String
  createdById                     String
  updatedById                     String
  soldByUserId                    String?
  createdAt                       DateTime         @default(now())
  updatedAt                       DateTime
  deleted                         Boolean          @default(false)
  taxExempt                       Boolean          @default(false)
  taxExemptId                     String?
  User_Invoice_createdByIdToUser  User             @relation("Invoice_createdByIdToUser", fields: [createdById], references: [id])
  Customer                        Customer         @relation(fields: [customerId], references: [id])
  Order                           Order?           @relation(fields: [orderId], references: [id])
  Invoice                         Invoice?         @relation("InvoiceToInvoice", fields: [parentInvoiceId], references: [id])
  other_Invoice                   Invoice[]        @relation("InvoiceToInvoice")
  User_Invoice_soldByUserIdToUser User?            @relation("Invoice_soldByUserIdToUser", fields: [soldByUserId], references: [id])
  Tenant                          Tenant           @relation(fields: [tenantId], references: [id])
  User_Invoice_updatedByIdToUser  User             @relation("Invoice_updatedByIdToUser", fields: [updatedById], references: [id])
  InvoiceDetail                   InvoiceDetail[]
  InvoiceVersion                  InvoiceVersion[]
  Payment                         Payment[]
  ShippingDetail                  ShippingDetail[]
}

model InvoiceDetail {
  id         Int       @id @default(autoincrement())
  invoiceId  String
  productId  Int
  quantity   Int
  taxId      Int?
  discountId Int?
  lineTotal  Decimal   @db.Decimal(10, 2)
  Discount   Discount? @relation(fields: [discountId], references: [id])
  Invoice    Invoice   @relation(fields: [invoiceId], references: [id])
  Product    Product   @relation(fields: [productId], references: [id])
  TaxRate    TaxRate?  @relation(fields: [taxId], references: [id])
}

model InvoiceSettings {
  id                  String  @id
  tenantId            String  @unique
  layout              String  @default("classic")
  primaryColor        String  @default("#1E3A8A")
  includeCustomerInfo Boolean @default(true)
  includePaymentTerms Boolean @default(true)
  includeDueDate      Boolean @default(true)
  includeNotes        Boolean @default(false)
  deleted             Boolean @default(false)
  Tenant              Tenant  @relation(fields: [tenantId], references: [id])
}

model InvoiceVersion {
  id         Int      @id @default(autoincrement())
  invoiceId  String
  number     String
  data       Json
  modifiedAt DateTime @default(now())
  modifiedBy String
  Invoice    Invoice  @relation(fields: [invoiceId], references: [id])
}

model Order {
  id          String      @id
  orderNumber String      @unique
  customerId  Int?
  tenantId    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime
  deleted     Boolean     @default(false)
  Invoice     Invoice[]
  Customer    Customer?   @relation(fields: [customerId], references: [id])
  Tenant      Tenant      @relation(fields: [tenantId], references: [id])
  OrderItem   OrderItem[]

  @@index([tenantId])
}

model OrderItem {
  id          Int     @id @default(autoincrement())
  orderId     String
  productId   Int
  sku         String  @db.VarChar(50)
  name        String  @db.VarChar(100)
  description String?
  variant     String?
  quantity    Int
  unitPrice   Decimal @db.Decimal(10, 2)
  totalPrice  Decimal @db.Decimal(10, 2)
  imageUrl    String?
  specs       Json?
  Order       Order   @relation(fields: [orderId], references: [id])
  Product     Product @relation(fields: [productId], references: [id])

  @@index([orderId])
}

model Payment {
  id                             Int      @id @default(autoincrement())
  invoiceId                      String
  amount                         Decimal  @db.Decimal(10, 2)
  date                           DateTime
  method                         String   @db.VarChar(50)
  status                         String   @db.VarChar(50)
  reference                      String?  @db.VarChar(255)
  createdById                    String
  updatedById                    String
  deleted                        Boolean  @default(false)
  User_Payment_createdByIdToUser User     @relation("Payment_createdByIdToUser", fields: [createdById], references: [id])
  Invoice                        Invoice  @relation(fields: [invoiceId], references: [id])
  User_Payment_updatedByIdToUser User     @relation("Payment_updatedByIdToUser", fields: [updatedById], references: [id])
}

model PaymentLog {
  id         Int      @id @default(autoincrement())
  timestamp  DateTime @default(now())
  logMessage String   @db.VarChar(255)
}

model PaymentMethod {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(50)
  description String?
  deleted     Boolean @default(false)
}

model PaymentStatus {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(50)
  description String?
  deleted     Boolean @default(false)
}

model Product {
  id                             Int                    @id @default(autoincrement())
  name                           String                 @db.VarChar(100)
  price                          Decimal                @db.Decimal(10, 2)
  imageUrl                       String?
  variant                        String?
  sku                            String?                @db.VarChar(50)
  barcode                        String?                @db.VarChar(100)
  qrCodeUrl                      String?
  createdAt                      DateTime               @default(now())
  updatedAt                      DateTime
  createdById                    String
  updatedById                    String
  description                    String?
  tenantId                       String
  archivedAt                     DateTime?
  category                       String?                @db.VarChar(100)
  isActive                       Boolean                @default(true)
  metaDesc                       String?
  metaTitle                      String?
  metadata                       Json?
  primaryIdentifierType          ProductIdentifierType?
  primaryIdentifierValue         String?
  stockAlertAt                   Int?
  stockQuantity                  Int                    @default(0)
  tags                           String[]
  unit                           String?                @db.VarChar(20)
  visibility                     String                 @default("PUBLIC")
  slug                           String?                @db.VarChar(120)
  deleted                        Boolean                @default(false)
  InvoiceDetail                  InvoiceDetail[]
  OrderItem                      OrderItem[]
  User_Product_createdByIdToUser User                   @relation("Product_createdByIdToUser", fields: [createdById], references: [id])
  Tenant                         Tenant                 @relation(fields: [tenantId], references: [id])
  User_Product_updatedByIdToUser User                   @relation("Product_updatedByIdToUser", fields: [updatedById], references: [id])
  ProductIdentifier              ProductIdentifier[]
  ProductVariant                 ProductVariant[]

  @@unique([tenantId, name])
  @@unique([tenantId, slug])
}

model ProductIdentifier {
  id        Int                   @id @default(autoincrement())
  productId Int
  type      ProductIdentifierType
  value     String
  imageUrl  String?
  Product   Product               @relation(fields: [productId], references: [id])

  @@index([productId])
}

model ProductVariant {
  id        Int     @id @default(autoincrement())
  productId Int
  name      String
  sku       String  @db.VarChar(50)
  barcode   String?
  price     Decimal @db.Decimal(10, 2)
  imageUrl  String?
  specs     Json?
  deleted   Boolean @default(false)
  Product   Product @relation(fields: [productId], references: [id])

  @@index([productId])
}

model ShippingDetail {
  id                                    Int      @id @default(autoincrement())
  invoiceId                             String
  address                               String   @db.VarChar(255)
  shippingDate                          DateTime
  estimatedArrival                      DateTime
  createdById                           String
  updatedById                           String
  deleted                               Boolean  @default(false)
  User_ShippingDetail_createdByIdToUser User     @relation("ShippingDetail_createdByIdToUser", fields: [createdById], references: [id])
  Invoice                               Invoice  @relation(fields: [invoiceId], references: [id])
  User_ShippingDetail_updatedByIdToUser User     @relation("ShippingDetail_updatedByIdToUser", fields: [updatedById], references: [id])
}

model TaxRate {
  id                             Int             @id @default(autoincrement())
  name                           String          @db.VarChar(50)
  rate                           Decimal         @db.Decimal(5, 2)
  createdById                    String
  updatedById                    String
  deleted                        Boolean         @default(false)
  InvoiceDetail                  InvoiceDetail[]
  User_TaxRate_createdByIdToUser User            @relation("TaxRate_createdByIdToUser", fields: [createdById], references: [id])
  User_TaxRate_updatedByIdToUser User            @relation("TaxRate_updatedByIdToUser", fields: [updatedById], references: [id])
  Tenant                         Tenant[]
}

model Tenant {
  id               String             @id
  name             String
  companyName      String?
  addressLine1     String?
  addressLine2     String?
  city             String?
  state            String?
  zip              String?
  zipPlus4         String?
  email            String?
  website          String?
  isUspsValidated  Boolean            @default(false)
  createdAt        DateTime           @default(now())
  invoiceCounter   Int                @default(1)
  invoiceFormat    String?
  invoicePrefix    String?
  isInvoiceSetup   Boolean            @default(false)
  autoResetYearly  Boolean            @default(false)
  lastResetYear    Int?
  defaultTaxRateId Int?
  deleted          Boolean            @default(false)
  plan             PlanTier           @default(FREE)
  Business         Business[]
  Customer         Customer[]
  Invoice          Invoice[]
  InvoiceSettings  InvoiceSettings?
  Order            Order[]
  Product          Product[]
  TaxRate          TaxRate?           @relation(fields: [defaultTaxRateId], references: [id])
  TenantMembership TenantMembership[]
}

model TenantMembership {
  id          String       @id
  tenantId    String
  userId      String
  role        TenantRole
  permissions Permission[] @default([])
  deleted     Boolean      @default(false)
  Tenant      Tenant       @relation(fields: [tenantId], references: [id])
  User        User         @relation(fields: [userId], references: [id])

  @@unique([tenantId, userId])
}

model User {
  id                                              String             @id
  email                                           String             @unique
  clerkId                                         String             @unique
  name                                            String?
  role                                            Role               @default(SUPPORT)
  createdAt                                       DateTime           @default(now())
  deleted                                         Boolean            @default(false)
  AuditLog                                        AuditLog[]
  Business_Business_createdByIdToUser             Business[]         @relation("Business_createdByIdToUser")
  Business_Business_updatedByIdToUser             Business[]         @relation("Business_updatedByIdToUser")
  Customer_Customer_createdByIdToUser             Customer[]         @relation("Customer_createdByIdToUser")
  Customer_Customer_updatedByIdToUser             Customer[]         @relation("Customer_updatedByIdToUser")
  Discount_Discount_createdByIdToUser             Discount[]         @relation("Discount_createdByIdToUser")
  Discount_Discount_updatedByIdToUser             Discount[]         @relation("Discount_updatedByIdToUser")
  Invoice_Invoice_createdByIdToUser               Invoice[]          @relation("Invoice_createdByIdToUser")
  Invoice_Invoice_soldByUserIdToUser              Invoice[]          @relation("Invoice_soldByUserIdToUser")
  Invoice_Invoice_updatedByIdToUser               Invoice[]          @relation("Invoice_updatedByIdToUser")
  Payment_Payment_createdByIdToUser               Payment[]          @relation("Payment_createdByIdToUser")
  Payment_Payment_updatedByIdToUser               Payment[]          @relation("Payment_updatedByIdToUser")
  Product_Product_createdByIdToUser               Product[]          @relation("Product_createdByIdToUser")
  Product_Product_updatedByIdToUser               Product[]          @relation("Product_updatedByIdToUser")
  ShippingDetail_ShippingDetail_createdByIdToUser ShippingDetail[]   @relation("ShippingDetail_createdByIdToUser")
  ShippingDetail_ShippingDetail_updatedByIdToUser ShippingDetail[]   @relation("ShippingDetail_updatedByIdToUser")
  TaxRate_TaxRate_createdByIdToUser               TaxRate[]          @relation("TaxRate_createdByIdToUser")
  TaxRate_TaxRate_updatedByIdToUser               TaxRate[]          @relation("TaxRate_updatedByIdToUser")
  TenantMembership                                TenantMembership[]
}

model ZipCache {
  zip       String    @id
  city      String    @default("test")
  state     String
  lat       Float?
  lng       Float?
  createdAt DateTime  @default(now())
  ZipCity   ZipCity[]
}

model ZipCity {
  id       Int      @id @default(autoincrement())
  name     String
  state    String   @default("state")
  zipCode  String
  ZipCache ZipCache @relation(fields: [zipCode], references: [zip])

  @@index([zipCode])
}

enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  PARTIALLY_PAID
  RETURNED
  REFUNDED
  PAID_IN_FULL
  CANCELLED
  PENDING
  UNPAID
  PARTIALLY_UNPAID
  PENDING_PAYMENT
  AWAITING_PAYMENT
  AWAITING_FULFILLMENT
  AWAITING_SHIPMENT
  AWAITING_DELIVERY
  AWAITING_PICKUP
  AWAITING_CONFIRMATION
  AWAITING_APPROVAL
  AWAITING_REVIEW
  SENT
  OVERDUE
  VOID
}

enum PaymentType {
  CASH
  CHECK
  CHARGE
  COD
  ON_ACCOUNT
  PAID_OUT
  RETURNED
}

enum Permission {
  INVITE_USERS
  MANAGE_USERS
  ASSIGN_ROLES
  ASSIGN_PERMISSIONS
  VIEW_TENANT_SETTINGS
  UPDATE_TENANT_SETTINGS
  CREATE_PRODUCT
  VIEW_PRODUCTS
  EDIT_PRODUCT
  ARCHIVE_PRODUCT
  DELETE_PRODUCT
  DELETE_PRODUCT_PERMANENTLY
  CREATE_ORDER
  VIEW_ORDERS
  EDIT_ORDER
  CANCEL_ORDER
  DELETE_ORDER
  DELETE_ORDER_PERMANENTLY
  CREATE_INVOICE
  VIEW_INVOICES
  EDIT_INVOICE
  DELETE_INVOICE
  DELETE_INVOICE_PERMANENTLY
  RESTORE_INVOICE
  VIEW_PAYMENTS
  REFUND_PAYMENT
  EXPORT_DATA
  MANAGE_BILLING
  VIEW_AUDIT_LOGS
  ACCESS_BETA_FEATURES
  PLATFORM_ADMIN
  DELETE_PERMANENTLY
  PURGE_ARCHIVED_DATA
}

enum PlanTier {
  FREE
  BASIC
  PRO
  ENTERPRISE
}

enum ProductIdentifierType {
  SKU
  BARCODE
  QR
  UPC
  CUSTOM
}

enum Role {
  SUPER_ADMIN
  SUPPORT
  DEVELOPER
}

enum TenantRole {
  OWNER
  ADMIN
  MEMBER
  MANAGER
  VIEWER
  CUSTOM
}
